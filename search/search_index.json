{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Augmenting EEG with GANs","text":""},{"location":"#the-gan-package","title":"The GAN Package","text":"<p>We here use Generative Adversarial Networks (GANs) to create trial-level synthetic EEG samples. We can then use these samples as extra data to train whichever classifier we want to use (e.g.,  Support Vector Machine, Neural Network).</p> <p>GANs are machine learning frameworks that consist of two adversarial neural network agents, namely the generator and the discriminator. The generator is trained to create novel samples that are indiscernible from real samples. In the current context, the generator produces realistic continuous EEG activity, conditioned on a set of experimental variables, which contain underlying neural features representative of the outcomes being classified. For example, depression manifests as increased alpha oscillatory activity in the EEG signal, and thus, an ideal generator would produce continuous EEG that includes these alpha signatures. In contrast to the generator, the discriminator determines whether a given sample is real or synthetically produced by the generator. The core insight of GANs is that the generator can effectively learn from the discriminator. Specifically, the generator will consecutively produce more realistic synthetic samples with the goal of \u201cfooling\u201d the discriminator into believing them as real. Once it has achieved realistic samples that the discriminator cannot discern, it can be used to generate synthetic data\u2014or in this context, synthetic EEG data.</p>"},{"location":"#detailed-evaluation-of-the-gan-package","title":"Detailed Evaluation of the GAN Package","text":"<p>Augmenting EEG with Generative Adversarial Networks Enhances Brain Decoding Across Classifiers and Sample Sizes Williams, Weinhardt, Wirzberger, &amp; Musslick (submitted, 2023)</p>"},{"location":"#about","title":"About","text":"<p>This project is in active development by the Autonomous Empirical Research Group, led by Sebastian Musslick, in collaboration with the Center for Computation and Visualization at Brown University.</p> <p>This research program is supported by Schmidt Science Fellows, in partnership with the Rhodes Trust, as well as the Carney BRAINSTORM program at Brown University.</p>"},{"location":"Tutorial/datastructure/","title":"Data Structure","text":""},{"location":"Tutorial/examples/","title":"EEG-GAN Examples","text":""},{"location":"Tutorial/examples/#gan-training-examples","title":"GAN Training Examples","text":"Select Training Dataset      You can direct the GAN to train on specific datasets using the <code>path_dataset</code> argument.  <code>python gan_training_main.py path_dataset=data\\my_data.csv</code> Number of Epochs      You can vary the number of epochs that the GAN is trained on with the <code>n_epochs</code> parameter.  <code>python gan_training_main.py n_epochs=8000</code> Continue Training a GAN      You can continue training a GAN using the <code>train_gan</code> and (optionally) <code>path_checkpoint</code> arguments. Not including the <code>path_checkpoint</code> argument will default to training a model <code>trained_models\\checkpoint.pt</code> <code>python gan_training_main.py train_gan path_checkpoint=trained_models\\my_model.pt</code> Training on GPU      You can use your GPU rather than CPU to train the GAN using the <code>ddp</code> parameter. <code>python gan_training_main.py ddp</code> Integrated GAN Training      Putting these arguments together, we can train our GAN:      \u2003On GPUs <code>ddp</code>     \u2003On our dataset <code>path_dataset=data\\my_data.csv</code>     \u2003For 8000 epochs <code>n_epochs=8000</code> <code>python gan_training_main.py ddp path_dataset=data\\my_data.csv n_epochs=8000</code>"},{"location":"Tutorial/examples/#generate-samples-examples","title":"Generate Samples Examples","text":"Select GAN Model      You can generate samples from a specific GAN using the <code>file</code> argument.  <code>python generate_samples_main.py file=trained_models\\my_GAN.pt</code> Set Generated Samples Save Name      You can declare the path and name of the saved generated samples file using the <code>path_samples</code> argument.  <code>python generate_samples_main.py path_samples=generated_samples\\my_samples.csv</code> Set Number of Samples to Generate      You can set the total number of samples to generate (which will be split equally across conditions) using the <code>num_samples_total</code> argument.  <code>python generate_samples_main.py num_samples_total=10000</code> Set Number of Samples to Generate in Parallel      You can set the number of samples that will be generated in parallel using the <code>num_samples_parallel</code> argument.  <code>python generate_samples_main.py num_samples_parallel=1000</code> Integrated Generate Samples      Putting these arguments together, we can generate samples:      \u2003On our model <code>file=trained_models\\my_GAN.pt</code>     \u2003With a saved filename  <code>path_samples=generated_samples\\my_samples.csv</code>     \u2003Generating 10,000 samples <code>num_samples_total=10000</code>     \u2003At a rate of 1,000 at a time <code>num_samples_parallel=1000</code>python generate_samples_main.py file=trained_models\\my_GAN.pt path_samples=generated_samples\\my_samples.csv num_samples_total=10000 num_samples_parallel=1000"},{"location":"Tutorial/fulltutorial/","title":"Full Tutorial","text":""},{"location":"Tutorial/functions/","title":"GAN Package Main Functions","text":""},{"location":"Tutorial/functions/#gan-package-details","title":"GAN Package Details","text":"<p>There are two main scripts from the GANs package:  <code>gan_training_main.py</code> - This trains a GAN  <code>generate_samples_main.py</code> - This generates synthetic samples using the trained GAN</p> <p>Arguments for these files are stated after the script filename, for example: <code>python gan_training_main.py n_epochs=100</code></p> <p>For the files in this package, you can use the help argument to see a list of possible arguments with a brief description: <code>python gan_training_main.py help</code></p>"},{"location":"Tutorial/functions/#gan-training-help","title":"GAN Training Help","text":"<p> <code>python gan_training_main.py help</code> </p>"},{"location":"Tutorial/functions/#generate-samples-help","title":"Generate Samples Help","text":"<p> <code>python generate_samples_main.py help</code> </p>"},{"location":"Tutorial/gettingstarted/","title":"Getting Started","text":""},{"location":"Tutorial/gettingstarted/#pre-requirements","title":"Pre-Requirements:","text":"<ol> <li>Python</li> <li>Pip</li> <li>Git</li> <li>Python Virtual Environment</li> </ol>"},{"location":"Tutorial/gettingstarted/#setting-up-the-package","title":"Setting Up the Package:","text":"<ol> <li> Open your terminal  <code>Named Terminal on Macs and Command Line in Windows/Linux</code> </li> <li> Navigate to the desired directory, for example: <code>cd GitHub/gansEEG</code> </li> <li> Clone the GAN package repository: <code>git clone https://github.com/AutoResearch/GAN-in-Neuro.git</code> </li> <li> Create a virtual environment: <code>python -m venv EEGGAN-venv</code> </li> <li> Activate the environment  For Windows: <code>EEGGAN-venv\\Scripts\\activate</code>  For Mac/Linux: <code>source EEGGAN-venv/bin/activate</code> </li> <li> Install dependencies  <code>pip install -r GAN-in-Neuro/requirements.txt</code> </li> </ol> <p>You are now ready to use the package!</p>"}]}